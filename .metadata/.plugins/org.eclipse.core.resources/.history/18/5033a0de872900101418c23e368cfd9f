/*
 * stm32f401xx.h
 *
 *  Created on: Apr 7, 2025
 *      Author: phucv
 */

#ifndef INC_STM32F401XX_H_
#define INC_STM32F401XX_H_

#include <stdint.h>
#include <stddef.h>

#define __vo volatile
#define __weak __attribute__((weak))

/***********************START: Processor Specific Details************/

/*
 * ARM Cortex Mx Processor NVIC ISERx register Addresses
 */
#define NVIC_ISER0					((__vo uint32_t*)0xE000E100)
#define NVIC_ISER1					((__vo uint32_t*)0xE000E104)
#define NVIC_ISER2					((__vo uint32_t*)0xE000E108)
#define NVIC_ISER3					((__vo uint32_t*)0xE000E10C)

/*
 * ARM Cortex Mx Processor NVIC ICERx register Addresses
 */
#define NVIC_ICER0					((__vo uint32_t*)0xE000E180)
#define NVIC_ICER1					((__vo uint32_t*)0xE000E184)
#define NVIC_ICER2					((__vo uint32_t*)0xE000E188)
#define NVIC_ICER3					((__vo uint32_t*)0xE000E18C)

/*
 * ARM Cortex Mx Processor Priority register Addresses Calculation
 */
#define NVIC_PR_BASE_ADDR			((__vo uint32_t*)0xE000E400)

/*
 * ARM Cortex Mx Processor number of Priority bits implemented in Priority Register
 */
#define NO_PR_BITS_IMPLEMENTED		4


/*
 * base addresses of Flash and SRAM memories
 */
#define FLASH_BASEADDR				0x08000000U
#define SRAM1_BASEADDR				0x20000000U
#define ROM							0x1FFF0000U
#define SRAM 						SRAM1_BASEADDR


/*
 * AHBx and APBx Bus Peripheral base addresses
 */
#define PERIPH_BASE					0x40000000U
#define APB1PERIPH_BASE				PERIPH_BASE
#define APB2PERIPH_BASE 			0x40010000U
#define AHB1PERIPH_BASE				0x40020000U
#define AHB2PERIPH_BASE				0x50000000U

/*
 * Base addresses of peripherals which are hanging on AHB1 bus
 */
#define GPIOA_BASEADDR				(AHB1PERIPH_BASE + 0x0000)
#define GPIOB_BASEADDR				(AHB1PERIPH_BASE + 0x0400)
#define GPIOC_BASEADDR				(AHB1PERIPH_BASE + 0x0800)
#define GPIOD_BASEADDR				(AHB1PERIPH_BASE + 0x0C00)
#define GPIOE_BASEADDR				(AHB1PERIPH_BASE + 0x1000)
#define GPIOH_BASEADDR				(AHB1PERIPH_BASE + 0x1C00)
#define RCC_BASEADDR				(AHB1PERIPH_BASE + 0x3800)
/*
 * Base addresses of peripherals which are hanging on APB1 bus
 */
#define I2C1_BASEADDR				(APB1PERIPH_BASE + 0x5400)
#define I2C2_BASEADDR				(APB1PERIPH_BASE + 0x5800)
#define I2C3_BASEADDR				(APB1PERIPH_BASE + 0x5C00)
#define SPI2_BASEADDR				(APB1PERIPH_BASE + 0x3800)
#define SPI3_BASEADDR				(APB1PERIPH_BASE + 0x3C00)
#define USART2_BASEADDR				(APB1PERIPH_BASE + 0x4400)

/*
 * Base addresses of peripherals which are hanging on APB2 bus
 */
#define SPI1_BASEADDR				(APB2PERIPH_BASE + 0x3000)
#define SPI4_BASEADDR				(APB2PERIPH_BASE + 0x3400)
#define USART1_BASEADDR				(APB2PERIPH_BASE + 0x1000)
#define USART6_BASEADDR				(APB2PERIPH_BASE + 0x1400)
#define EXTI_BASEADDR				(APB2PERIPH_BASE + 0x3C00)
#define SYSCFG_BASEADDR				(APB2PERIPH_BASE + 0x3800)


/*===================Peripheral register definition structures====================*/

typedef struct
{
	__vo uint32_t MODER;				/*GPIO port mode register 					Address offset:  0x00*/
	__vo uint32_t OTYPER;				/*GPIO port output type register				Address offset:  0x04*/
	__vo uint32_t OSPEEDR;				/*GPIO port output speed register				Address offset:  0x08*/
	__vo uint32_t PUPDR;				/*GPIO port pull-up/pull-down register		Address offset:  0x0C*/
	__vo uint32_t IDR;					/*GPIO port input data register					Address offset:  0x10*/
	__vo uint32_t ODR;					/*GPIO port output data register				Address offset:  0x14*/
	__vo uint32_t BSRR;					/*GPIO port bit set/reset register 				Address offset:  0x18*/
	__vo uint32_t LCKR;					/*GPIO port configuration lock register			Address offset:  0x1C*/
	__vo uint32_t AFR[2];				/*AFR[0]: GPIO alternate function low register
									  AFR[1]: GPIO alternate function high register 	Address offset:  0x20 and 0X24*/
}GPIO_RegDef_t;

typedef struct
{
	__vo uint32_t CR;					/*0x00 RCC clock control register*/
	__vo uint32_t PLLCFGR;				/*0x04 RCC PLL configuration register*/
	__vo uint32_t CFGR;					/*0x08 RCC clock configuration register*/
	__vo uint32_t CIR;					/*0x0C RCC clock interrupt register*/
	__vo uint32_t AHB1RSTR;				/*0x10 RCC AHB1 peripheral reset register*/
	__vo uint32_t AHB2RSTR;				/*0x14 RCC AHB2 peripheral reset register*/
		 uint32_t RESERVED0[2];  		/*0x18 & 0x1C*/
	__vo uint32_t APB1RSTR;				/*0x20 RCC APB1 peripheral reset register*/
	__vo uint32_t APB2RSTR;				/*0x24 RCC APB2 peripheral reset register*/
	     uint32_t RESERVED1[2];			/*0x28 & 0x2C*/
	__vo uint32_t AHB1ENR;				/*0x30 RCC AHB1 peripheral clock enable register*/
	__vo uint32_t AHB2ENR;				/*0x34 RCC AHB2 peripheral clock enable register*/
		 uint32_t RESERVED2[2];			/*0x38 & 0x3C*/
	__vo uint32_t APB1ENR;				/*0x40 RCC APB1 peripheral clock enable register*/
	__vo uint32_t APB2ENR;				/*0x44 RCC APB2 peripheral clock enable register*/
		 uint32_t RESERVED3[2];			/*0x48 & 0x4C*/
	__vo uint32_t AHB1LPENR;			/*0x50 RCC AHB1 peripheral clock enable in low power mode register*/
	__vo uint32_t AHB2LPENR;			/*0x54 RCC AHB2 peripheral clock enable in low power mode register*/
		 uint32_t RESERVED4[2];			/*0x58 & 0x5C*/
	__vo uint32_t APB1LPENR;			/*0x60 RCC APB1 peripheral clock enable in low power mode register*/
	__vo uint32_t APB2LPENR;			/*0x64 RCC APB2 peripheral clock enabled in low power mode register*/
		 uint32_t RESERVED5[2];			/*0x68 & 0x6C*/
	__vo uint32_t BDCR;					/*0x70 RCC Backup domain control register*/
	__vo uint32_t CSR;					/*0x74 RCC clock control & status register*/
		 uint32_t RESERVED6[2];			/*0x78 & 0x7C*/
	__vo uint32_t SSCGR;				/*0x80 RCC spread spectrum clock generation register*/
	__vo uint32_t PLLI2SCFGR;			/*0x84 RCC PLLI2S configuration register*/
		 uint32_t RESERVED7;			/*0x88*/
	__vo uint32_t DCKCFGR;				/*0x8C RCC Dedicated Clocks Configuration Register*/
}RCC_RegDef_t;

typedef struct
{
	__vo uint32_t IMR;					/*0x00 Interrupt mask register*/
	__vo uint32_t EMR;					/*0x04 Event mask register*/
	__vo uint32_t RTSR;					/*0x08 Rising trigger selection register*/
	__vo uint32_t FTSR;					/*0x0C Falling trigger selection register*/
	__vo uint32_t SWIER;				/*0x10 Software interrupt event register*/
	__vo uint32_t PR;					/*0x14 Pending register*/
}EXTI_RegDef_t;

typedef struct
{
	__vo uint32_t MEMRMP;				/*0x00 SYSCFG memory remap register*/
	__vo uint32_t PMC;					/*0x04 SYSCFG peripheral mode configuration register */
	__vo uint32_t EXTICR[4];			/*0x08 0x0C 0x10 0x14 SYSCFG external interrupt configuration register*/
	uint32_t RESERVED1[2];				/*0x18 0x1C*/
	__vo uint32_t CMPCR;				/*0x20  Compensation cell control register*/
}SYSCFG_RegDef_t;

typedef struct
{
	__vo uint32_t CR1;					/*0x00 SPI control register 1*/
	__vo uint32_t CR2;					/*0x04 SPI control register 2*/
	__vo uint32_t SR;					/*0x08 SPI status register*/
	__vo uint32_t DR;					/*0x0C SPI data register*/
	__vo uint32_t CRCPR;				/*0x10 SPI CRC polynomial register*/
	__vo uint32_t RXCRCR;				/*0x14 SPI RX CRC register*/
	__vo uint32_t TXCRCR;				/*0x18 SPI TX CRC register*/
	__vo uint32_t I2SCFGR;				/*0x1C SPI_I2S configuration register*/
	__vo uint32_t I2SPR;				/*0x20 SPI_I2S prescaler register*/
}SPI_RegDef_t;

typedef struct
{
	__vo uint32_t CR1;					/*0x00 I2C Control register 1*/
	__vo uint32_t CR2;					/*0x04 I2C Control register 2*/
	__vo uint32_t OAR1;					/*0x08 I2C Own address register 1*/
	__vo uint32_t OAR2;					/*0x0C I2C Own address register 2*/
	__vo uint32_t DR;					/*0x10 I2C Data register*/
	__vo uint32_t SR1;					/*0x14 I2C Status register 1*/
	__vo uint32_t SR2;					/*0x18 I2C Status register 2*/
	__vo uint32_t CCR;					/*0x1C I2C Clock control register*/
	__vo uint32_t TRISE;				/*0x20 I2C TRISE register*/
	__vo uint32_t FLTR;					/*0x24 I2C FLTR register*/
}I2C_RegDef_t;

typedef struct
{
	__vo uint32_t SR;					/*0x00 USART Status register*/
	__vo uint32_t DR;					/*0x04 USART  Data register*/
	__vo uint32_t BRR;					/*0x08 USART  Baud rate register*/
	__vo uint32_t CR1;					/*0x0C USART  Control register 1*/
	__vo uint32_t CR2;					/*0x10 USART  Control register 2*/
	__vo uint32_t CR3;					/*0x14 USART  Control register 3*/
	__vo uint32_t GTPR;					/*0x18 USART  Guard time and prescaler register*/
}USART_Regdef_t;

/*
 * peripheral definitions
 */
#define GPIOA		((GPIO_RegDef_t*) GPIOA_BASEADDR )
#define GPIOB		((GPIO_RegDef_t*) GPIOB_BASEADDR )
#define GPIOC		((GPIO_RegDef_t*) GPIOC_BASEADDR )
#define GPIOD		((GPIO_RegDef_t*) GPIOD_BASEADDR )
#define GPIOE		((GPIO_RegDef_t*) GPIOE_BASEADDR )
#define GPIOH		((GPIO_RegDef_t*) GPIOH_BASEADDR )

#define RCC			((RCC_RegDef_t*)  RCC_BASEADDR )

#define EXTI		((EXTI_RegDef_t*)  EXTI_BASEADDR )

#define SYSCFG		((SYSCFG_RegDef_t*)  SYSCFG_BASEADDR )

#define SPI1		((SPI_RegDef_t*)	SPI1_BASEADDR )
#define SPI2 		((SPI_RegDef_t*)	SPI2_BASEADDR )
#define SPI3		((SPI_RegDef_t*)	SPI3_BASEADDR )
#define SPI4		((SPI_RegDef_t*)	SPI4_BASEADDR )

#define I2C1		((I2C_RegDef_t*)	I2C1_BASEADDR )
#define I2C2		((I2C_RegDef_t*)	I2C2_BASEADDR )
#define I2C3		((I2C_RegDef_t*)	I2C3_BASEADDR )

#define USART1		((USART_Regdef_t*)	USART1_BASEADDR)
#define USART2		((USART_Regdef_t*)	USART2_BASEADDR)
#define USART6		((USART_Regdef_t*)	USART6_BASEADDR)


/*
 * Clock Enable Macros for GPIOx peripherals
 */
#define GPIOA_PCLK_EN()	( RCC->AHB1ENR |= ( 1 << 0 ) )
#define GPIOB_PCLK_EN()	( RCC->AHB1ENR |= ( 1 << 1 ) )
#define GPIOC_PCLK_EN()	( RCC->AHB1ENR |= ( 1 << 2 ) )
#define GPIOD_PCLK_EN()	( RCC->AHB1ENR |= ( 1 << 3 ) )
#define GPIOE_PCLK_EN()	( RCC->AHB1ENR |= ( 1 << 4 ) )
#define GPIOH_PCLK_EN()	( RCC->AHB1ENR |= ( 1 << 7 ) )

/*
 * Clock Enable Macros for I2Cx peripherals
 */
#define I2C1_PCLK_EN()	( RCC->APB1ENR |= ( 1 << 21 ))
#define I2C2_PCLK_EN()	( RCC->APB1ENR |= ( 1 << 22 ))
#define I2C3_PCLK_EN()	( RCC->APB1ENR |= ( 1 << 23 ))

/*
 * Clock Enable Macros for SPIx peripherals
 */
#define SPI1_PCLK_EN()  ( RCC->APB2ENR |= ( 1 << 12 ))
#define SPI2_PCLK_EN()  ( RCC->APB1ENR |= ( 1 << 14 ))
#define SPI3_PCLK_EN()  ( RCC->APB1ENR |= ( 1 << 15 ))
#define SPI4_PCLK_EN()  ( RCC->APB2ENR |= ( 1 << 13 ))

/*
 * Clock Enable Macros for USARTx peripherals
 */
#define USART1_PCLK_EN() ( RCC->APB2ENR |= ( 1 << 4 ))
#define USART2_PCLK_EN() ( RCC->APB1ENR |= ( 1 << 17 ))
#define USART6_PCLK_EN() ( RCC->APB2ENR |= ( 1 << 5 ))

/*
 * Clock Enable Macros for SYSCFG peripherals
 */
#define SYSCFG_PCLK_EN() ( RCC->APB2ENR |= ( 1 << 14 ))

/*
 * Clock Disable Macros for GPIOx peripherals
 */
#define GPIOA_PCLK_DI()	( RCC->AHB1ENR &= ~ ( 1 << 0 ) )
#define GPIOB_PCLK_DI()	( RCC->AHB1ENR &= ~ ( 1 << 1 ) )
#define GPIOC_PCLK_DI()	( RCC->AHB1ENR &= ~ ( 1 << 2 ) )
#define GPIOD_PCLK_DI()	( RCC->AHB1ENR &= ~ ( 1 << 3 ) )
#define GPIOE_PCLK_DI()	( RCC->AHB1ENR &= ~ ( 1 << 4 ) )
#define GPIOH_PCLK_DI()	( RCC->AHB1ENR &= ~ ( 1 << 7 ) )

/*
 * Clock Disable Macros for I2Cx peripherals
 */
#define I2C1_PCLK_DI()	( RCC->APB1ENR &= ~ ( 1 << 21 ))
#define I2C2_PCLK_DI()	( RCC->APB1ENR &= ~ ( 1 << 22 ))
#define I2C3_PCLK_DI()	( RCC->APB1ENR &= ~ ( 1 << 23 ))

/*
 * Clock Disable Macros for SPIx peripherals
 */
#define SPI1_PCLK_DI()  ( RCC->APB2ENR &= ~ ( 1 << 12 ))
#define SPI2_PCLK_DI()  ( RCC->APB1ENR &= ~ ( 1 << 14 ))
#define SPI3_PCLK_DI()  ( RCC->APB1ENR &= ~ ( 1 << 15 ))
#define SPI4_PCLK_DI()  ( RCC->APB2ENR &= ~ ( 1 << 13 ))

/*
 * Clock Disable Macros for USARTx peripherals
 */
#define USART1_PCLK_DI() ( RCC->APB2ENR &= ~ ( 1 << 4 ))
#define USART2_PCLK_DI() ( RCC->APB1ENR &= ~ ( 1 << 17 ))
#define USART6_PCLK_DI() ( RCC->APB2ENR &= ~ ( 1 << 5 ))

/*
 * Clock Disable Macros for SYSCFG peripherals
 */
#define SYSCFG_PCLK_DI() ( RCC->APB2ENR &= ~ ( 1 << 14 ))

/*
 * Macros to reset GPIOx peripherals
 */
#define GPIOA_REG_RESET() do{ (RCC->AHB1RSTR |= ( 1 << 0 ));	(RCC->AHB1RSTR &= ~( 1 << 0 )); }while(0)
#define GPIOB_REG_RESET() do{ (RCC->AHB1RSTR |= ( 1 << 1 ));	(RCC->AHB1RSTR &= ~( 1 << 1 )); }while(0)
#define GPIOC_REG_RESET() do{ (RCC->AHB1RSTR |= ( 1 << 2 ));	(RCC->AHB1RSTR &= ~( 1 << 2 )); }while(0)
#define GPIOD_REG_RESET() do{ (RCC->AHB1RSTR |= ( 1 << 3 ));	(RCC->AHB1RSTR &= ~( 1 << 3 )); }while(0)
#define GPIOE_REG_RESET() do{ (RCC->AHB1RSTR |= ( 1 << 4 ));	(RCC->AHB1RSTR &= ~( 1 << 4 )); }while(0)
#define GPIOH_REG_RESET() do{ (RCC->AHB1RSTR |= ( 1 << 7 ));	(RCC->AHB1RSTR &= ~( 1 << 7 )); }while(0)

/*
 * Returns port code for given GPIOx base address
 */
#define GPIO_BASEADDR_TO_CODE(x)   ((x == GPIOA)? 0:\
									(x == GPIOB)? 1:\
									(x == GPIOC)? 2:\
									(x == GPIOD)? 3:\
									(x == GPIOE)? 4:0)

/*
 * Macros to reset SPIx peripherals
 */
#define SPI1_REG_RESET() do{ (RCC->APB2RSTR |= ( 1 << 12 ));	(RCC->APB2RSTR &= ~( 1 << 12 )); }while(0)
#define SPI2_REG_RESET() do{ (RCC->APB1RSTR |= ( 1 << 14 ));	(RCC->APB1RSTR &= ~( 1 << 14 )); }while(0)
#define SPI3_REG_RESET() do{ (RCC->APB1RSTR |= ( 1 << 15 ));	(RCC->APB1RSTR &= ~( 1 << 15 )); }while(0)
#define SPI4_REG_RESET() do{ (RCC->APB2RSTR |= ( 1 << 13 ));	(RCC->APB2RSTR &= ~( 1 << 13 )); }while(0)

/*
 * Macros to reset I2Cx peripherals
 */
#define I2C1_REG_RESET() do{ (RCC->APB1RSTR |= ( 1 << 21 ));	(RCC->APB1RSTR &= ~( 1 << 21 )); }while(0)
#define I2C2_REG_RESET() do{ (RCC->APB1RSTR |= ( 1 << 22 ));	(RCC->APB1RSTR &= ~( 1 << 22 )); }while(0)
#define I2C3_REG_RESET() do{ (RCC->APB1RSTR |= ( 1 << 23 ));	(RCC->APB1RSTR &= ~( 1 << 23 )); }while(0)

/*
 * Macros to reset USARTx peripherals
 */
#define USART1_REG_RESET() do{ (RCC->APB2RSTR |= ( 1 << 4 ));	(RCC->APB2RSTR &= ~( 1 << 4 )); }while(0)
#define USART6_REG_RESET() do{ (RCC->APB2RSTR |= ( 1 << 5 ));	(RCC->APB2RSTR &= ~( 1 << 5 )); }while(0)
#define USART2_REG_RESET() do{ (RCC->APB1RSTR |= ( 1 << 17 ));	(RCC->APB1RSTR &= ~( 1 << 17 )); }while(0)

/*
 * IRQ(Interrupt requests) Number of STM32F401x MCU
 */
#define IRQ_NO_EXIT0			6
#define IRQ_NO_EXIT1			7
#define IRQ_NO_EXIT2			8
#define IRQ_NO_EXIT3			9
#define IRQ_NO_EXIT4			10
#define IRQ_NO_EXIT9_5			23
#define IRQ_NO_EXIT15_10		40

#define IRQ_NO_SPI1				35
#define IRQ_NO_SPI2				36
#define IRQ_NO_SPI3				51
#define IRQ_NO_SPI4				84

#define IRQ_NO_I2C1_EV			31	//event interrupt
#define IRQ_NO_I2C1_ER			32	//error interrupt
#define IRQ_NO_I2C2_EV			33	//event interrupt
#define IRQ_NO_I2C2_ER			34	//error interrupt
#define IRQ_NO_I2C3_EV			72	//event interrupt
#define IRQ_NO_I2C4_ER			73	//error interrupt


/*
 * Macros for all the possible priority levels
 */
#define NVIC_IRQ_PRIO0			0
#define NVIC_IRQ_PRIO1			1
#define NVIC_IRQ_PRIO2			2
#define NVIC_IRQ_PRIO3			3
#define NVIC_IRQ_PRIO4			4
#define NVIC_IRQ_PRIO5			5
#define NVIC_IRQ_PRIO6			6
#define NVIC_IRQ_PRIO7			7
#define NVIC_IRQ_PRIO8			8
#define NVIC_IRQ_PRIO9			9
#define NVIC_IRQ_PRIO10			10
#define NVIC_IRQ_PRIO11			11
#define NVIC_IRQ_PRIO12			12
#define NVIC_IRQ_PRIO13			13
#define NVIC_IRQ_PRIO14			14
#define NVIC_IRQ_PRIO15			15

//some generic macros
#define ENABLE 				1
#define DISABLE 			0
#define SET 				ENABLE
#define RESET 				DISABLE
#define GPIO_PIN_SET 		SET
#define GPIO_PIN_RESET 		RESET
#define FLAG_RESET			RESET
#define FLAG_SET			SET

/*
 * Bit position definitions of SPI peripheral
 */
//SPI_CR1
#define SPI_CR1_CPHA		0
#define SPI_CR1_CPOL		1
#define SPI_CR1_MSTR		2
#define SPI_CR1_BR			3
#define SPI_CR1_SPE			6
#define SPI_CR1_LSBFIRST	7
#define SPI_CR1_SSI			8
#define SPI_CR1_SSM			9
#define SPI_CR1_RXONLY 		10
#define SPI_CR1_DFF			11
#define SPI_CR1_CRCNEXT		12
#define SPI_CR1_CRCEN		13
#define SPI_CR1_BIDIOE		14
#define SPI_CR1_BIDIMODE	15

//SPI_CR2
#define SPI_CR2_RXDMAEN		0
#define SPI_CR2_TXDMAEN		1
#define SPI_CR2_SSOE		2
#define SPI_CR2_FRF			4
#define SPI_CR2_ERRIE		5
#define SPI_CR2_RXNEIE		6
#define SPI_CR2_TXEIE		7

//SPI_SR
#define SPI_SR_RXNE			0
#define SPI_SR_TXE			1
#define SPI_SR_CHSIDE		2
#define SPI_SR_UDR			3
#define SPI_SR_CRCERR		4
#define SPI_SR_MODF			5
#define SPI_SR_OVR			6
#define SPI_SR_BSY			7
#define SPI_SR_FRE			8

/*
 * Bit position definitions of I2C peripheral
 */
//I2C_CR1
#define I2C_CR1_PE 			0
#define I2C_CR1_SMBUS		1
#define I2C_CR1_SMBTYPE		3
#define I2C_CR1_ENARP		4
#define I2C_CR1_ENPEC		5
#define I2C_CR1_ENGC		6
#define I2C_CR1_NOSTRETCH	7
#define I2C_CR1_START		8
#define I2C_CR1_STOP		9
#define I2C_CR1_ACK			10
#define I2C_CR1_POS			11
#define I2C_CR1_PEC			12
#define I2C_CR1_ALERT		13
#define I2C_CR1_SWRST		15

//I2C_CR2
#define I2C_CR2_FREQ 		0
#define I2C_CR2_ITERREN		8
#define I2C_CR2_ITEVTEN		9
#define I2C_CR2_ITBUFEN 	10
#define I2C_CR2_DMAEN 		11
#define I2C_CR2_LAST 		12

//I2C_SR1
#define I2C_SR1_SB			0
#define I2C_SR1_ADDR		1
#define I2C_SR1_BTF			2
#define I2C_SR1_ADD10		3
#define I2C_SR1_STOPF		4
#define I2C_SR1_RxNE		6
#define I2C_SR1_TxE			7
#define I2C_SR1_BERR		8
#define I2C_SR1_ARLO		9
#define I2C_SR1_AF			10
#define I2C_SR1_OVR			11
#define I2C_SR1_PECERR		12
#define I2C_SR1_TIMEOUT		14
#define I2C_SR1_SMBALERT	15

//I2C_SR2
#define I2C_SR2_MSL			0
#define I2C_SR2_BUSY		1
#define I2C_SR2_TRA			2
#define I2C_SR2_GENCALL		4
#define I2C_SR2_SMBDEFAULT	5
#define I2C_SR2_SMBHOST		6
#define I2C_SR2_DUALF		7
#define I2C_SR2_PEC			8

//I2C_CCR
#define I2C_CCR_CCR			0
#define I2C_CCR_DUTY		14
#define I2C_CCR_FS			15

/*
 * Bit position definitions of USART peripheral
 */
//USART_SR
#define USART_SR_PE			0
#define USART_SR_FE			1
#define USART_SR_NF			2
#define USART_SR_ORE		3
#define USART_SR_IDLE		4
#define USART_SR_RXNE		5
#define USART_SR_TC			6
#define USART_SR_TXE		7
#define USART_SR_LBD		8
#define USART_SR_CTS		9

//USART_BRR
#define USART_DIV_Fraction	0
#define USART_DIV_Mantissa	4

//USART_CR1
#define USART_CR1_SBK		0
#define USART_CR1_RWU		1
#define USART_CR1_RE		2
#define USART_CR1_TE		3
#define USART_CR1_IDLEIE	4
#define USART_CR1_RXNEIE	5
#define USART_CR1_TCIE		6
#define USART_CR1_TXEIE		7
#define USART_CR1_PEIE		8
#define USART_CR1_PS		9
#define USART_CR1_PCE		10
#define USART_CR1_WAKE		11
#define USART_CR1_M			12
#define USART_CR1_UE		13
#define USART_CR1_OVER8		15

//USART_CR2
#define USART_CR2_ADD		0
#define USART_CR2_LBDL		5
#define USART_CR2_LBDIE		6
#define USART_CR2_LBCL		8
#define USART_CR2_CPHA		9
#define USART_CR2_CPOL		10
#define USART_CR2_CLKEN		11
#define USART_CR2_STOP		12
#define USART_CR2_LINEN		14

//USART_CR3
#define USART_CR3_EIE		0
#define USART_CR3_IREN		1
#define USART_CR3_IRLP		2
#define USART_CR3_HDSEL		3
#define USART_CR3_NACK		4
#define USART_CR3_SCEN		5
#define USART_CR3_DMAR		6
#define USART_CR3_DMAT		7
#define USART_CR3_RTSE		8
#define USART_CR3_CTSE		9
#define USART_CR3_CTSIE		10
#define USART_CR3_ONEBIT	11

//USART_GTPR
#define USART_GTPR_PSC		0
#define USART_GTPR_GT		8





#include "stm32f401xx_gpio_driver.h"
#include "stm32f401xx_spi_driver.h"
#include "stm32f401xx_i2c_driver.h"

#endif /* INC_STM32F401XX_H_ */
