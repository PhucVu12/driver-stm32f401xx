
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b74  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d08  08000d08  00002418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d08  08000d08  00002418  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000d08  08000d08  00001d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000d10  08000d10  00002418  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d10  08000d10  00001d10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d14  08000d14  00001d14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000418  20000000  08000d18  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000040  20000418  08001130  00002418  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000458  08001130  00002458  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001753  00000000  00000000  00002448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000005d6  00000000  00000000  00003b9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  00004178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000127  00000000  00000000  00004310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002c43  00000000  00000000  00004437  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000022c2  00000000  00000000  0000707a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000abdb  00000000  00000000  0000933c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00013f17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000584  00000000  00000000  00013f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004e  00000000  00000000  000144e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000418 	.word	0x20000418
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000cf0 	.word	0x08000cf0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000041c 	.word	0x2000041c
 80001d0:	08000cf0 	.word	0x08000cf0

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <delay>:
#include "stm32f401xx.h"

char msg[1024] = "UART Tx Testing...\n\r";

void delay(void)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
	for(uint32_t i=0; i<500000; i++);
 80001ea:	2300      	movs	r3, #0
 80001ec:	607b      	str	r3, [r7, #4]
 80001ee:	e002      	b.n	80001f6 <delay+0x12>
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	3301      	adds	r3, #1
 80001f4:	607b      	str	r3, [r7, #4]
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	4a04      	ldr	r2, [pc, #16]	@ (800020c <delay+0x28>)
 80001fa:	4293      	cmp	r3, r2
 80001fc:	d9f8      	bls.n	80001f0 <delay+0xc>
}
 80001fe:	bf00      	nop
 8000200:	bf00      	nop
 8000202:	370c      	adds	r7, #12
 8000204:	46bd      	mov	sp, r7
 8000206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020a:	4770      	bx	lr
 800020c:	0007a11f 	.word	0x0007a11f

08000210 <USART2_Init>:

USART_Handle_t usart2_handle;

void USART2_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8000214:	4b0d      	ldr	r3, [pc, #52]	@ (800024c <USART2_Init+0x3c>)
 8000216:	4a0e      	ldr	r2, [pc, #56]	@ (8000250 <USART2_Init+0x40>)
 8000218:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config_t.USART_Baud = USART_STD_BAUD_115200;
 800021a:	4b0c      	ldr	r3, [pc, #48]	@ (800024c <USART2_Init+0x3c>)
 800021c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000220:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config_t.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000222:	4b0a      	ldr	r3, [pc, #40]	@ (800024c <USART2_Init+0x3c>)
 8000224:	2200      	movs	r2, #0
 8000226:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config_t.USART_Mode = USART_MODE_ONLY_TX;
 8000228:	4b08      	ldr	r3, [pc, #32]	@ (800024c <USART2_Init+0x3c>)
 800022a:	2200      	movs	r2, #0
 800022c:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config_t.USART_NoOfStopBits = USART_STOPBITS_1;
 800022e:	4b07      	ldr	r3, [pc, #28]	@ (800024c <USART2_Init+0x3c>)
 8000230:	2200      	movs	r2, #0
 8000232:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config_t.USART_WordLength = USART_WORDLEN_8BITS;
 8000234:	4b05      	ldr	r3, [pc, #20]	@ (800024c <USART2_Init+0x3c>)
 8000236:	2200      	movs	r2, #0
 8000238:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config_t.USART_ParityControl = USART_PARITY_DISABLE;
 800023a:	4b04      	ldr	r3, [pc, #16]	@ (800024c <USART2_Init+0x3c>)
 800023c:	2200      	movs	r2, #0
 800023e:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000240:	4802      	ldr	r0, [pc, #8]	@ (800024c <USART2_Init+0x3c>)
 8000242:	f000 fc35 	bl	8000ab0 <USART_Init>

}
 8000246:	bf00      	nop
 8000248:	bd80      	pop	{r7, pc}
 800024a:	bf00      	nop
 800024c:	20000434 	.word	0x20000434
 8000250:	40004400 	.word	0x40004400

08000254 <USART2_GPIOInit>:

void USART2_GPIOInit(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
	GPIO_Handle_t USART_GPIOS;

	USART_GPIOS.pGPIOx = GPIOA;
 800025a:	4b0e      	ldr	r3, [pc, #56]	@ (8000294 <USART2_GPIOInit+0x40>)
 800025c:	607b      	str	r3, [r7, #4]
	USART_GPIOS.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800025e:	2302      	movs	r3, #2
 8000260:	727b      	strb	r3, [r7, #9]
	USART_GPIOS.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000262:	2300      	movs	r3, #0
 8000264:	733b      	strb	r3, [r7, #12]
	USART_GPIOS.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000266:	2301      	movs	r3, #1
 8000268:	72fb      	strb	r3, [r7, #11]
	USART_GPIOS.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800026a:	2302      	movs	r3, #2
 800026c:	72bb      	strb	r3, [r7, #10]
	USART_GPIOS.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 800026e:	2307      	movs	r3, #7
 8000270:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	USART_GPIOS.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 8000272:	2302      	movs	r3, #2
 8000274:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART_GPIOS);
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f000 f917 	bl	80004ac <GPIO_Init>

	//USART2 RX
	USART_GPIOS.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 800027e:	2303      	movs	r3, #3
 8000280:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&USART_GPIOS);
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f911 	bl	80004ac <GPIO_Init>

}
 800028a:	bf00      	nop
 800028c:	3710      	adds	r7, #16
 800028e:	46bd      	mov	sp, r7
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	40020000 	.word	0x40020000

08000298 <GPIO_ButtonInits>:

void GPIO_ButtonInits(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b084      	sub	sp, #16
 800029c:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;
	 //BUTTON PA1
	GPIOBtn.pGPIOx = GPIOA;
 800029e:	4b09      	ldr	r3, [pc, #36]	@ (80002c4 <GPIO_ButtonInits+0x2c>)
 80002a0:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002a2:	2300      	movs	r3, #0
 80002a4:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002a6:	2300      	movs	r3, #0
 80002a8:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002aa:	2302      	movs	r3, #2
 80002ac:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002ae:	2300      	movs	r3, #0
 80002b0:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002b2:	1d3b      	adds	r3, r7, #4
 80002b4:	4618      	mov	r0, r3
 80002b6:	f000 f8f9 	bl	80004ac <GPIO_Init>
}
 80002ba:	bf00      	nop
 80002bc:	3710      	adds	r7, #16
 80002be:	46bd      	mov	sp, r7
 80002c0:	bd80      	pop	{r7, pc}
 80002c2:	bf00      	nop
 80002c4:	40020000 	.word	0x40020000

080002c8 <main>:

int main()
{
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0
	GPIO_ButtonInits();
 80002cc:	f7ff ffe4 	bl	8000298 <GPIO_ButtonInits>

	USART2_GPIOInit();
 80002d0:	f7ff ffc0 	bl	8000254 <USART2_GPIOInit>

	USART2_Init();
 80002d4:	f7ff ff9c 	bl	8000210 <USART2_Init>

	USART_PeripheralControl(USART2, ENABLE);
 80002d8:	2101      	movs	r1, #1
 80002da:	480b      	ldr	r0, [pc, #44]	@ (8000308 <main+0x40>)
 80002dc:	f000 fcb3 	bl	8000c46 <USART_PeripheralControl>

	while(1)
	{
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 80002e0:	bf00      	nop
 80002e2:	2100      	movs	r1, #0
 80002e4:	4809      	ldr	r0, [pc, #36]	@ (800030c <main+0x44>)
 80002e6:	f000 fa5b 	bl	80007a0 <GPIO_ReadFromInputPin>
 80002ea:	4603      	mov	r3, r0
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d0f8      	beq.n	80002e2 <main+0x1a>
		delay();
 80002f0:	f7ff ff78 	bl	80001e4 <delay>

		USART_SendData(&usart2_handle, (uint8_t*)msg, strlen(msg));
 80002f4:	4806      	ldr	r0, [pc, #24]	@ (8000310 <main+0x48>)
 80002f6:	f7ff ff6d 	bl	80001d4 <strlen>
 80002fa:	4603      	mov	r3, r0
 80002fc:	461a      	mov	r2, r3
 80002fe:	4904      	ldr	r1, [pc, #16]	@ (8000310 <main+0x48>)
 8000300:	4804      	ldr	r0, [pc, #16]	@ (8000314 <main+0x4c>)
 8000302:	f000 fc52 	bl	8000baa <USART_SendData>
		while(! GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0));
 8000306:	e7eb      	b.n	80002e0 <main+0x18>
 8000308:	40004400 	.word	0x40004400
 800030c:	40020000 	.word	0x40020000
 8000310:	20000000 	.word	0x20000000
 8000314:	20000434 	.word	0x20000434

08000318 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000318:	480d      	ldr	r0, [pc, #52]	@ (8000350 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800031a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800031c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000320:	480c      	ldr	r0, [pc, #48]	@ (8000354 <LoopForever+0x6>)
  ldr r1, =_edata
 8000322:	490d      	ldr	r1, [pc, #52]	@ (8000358 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000324:	4a0d      	ldr	r2, [pc, #52]	@ (800035c <LoopForever+0xe>)
  movs r3, #0
 8000326:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000328:	e002      	b.n	8000330 <LoopCopyDataInit>

0800032a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800032a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800032c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800032e:	3304      	adds	r3, #4

08000330 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000330:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000332:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000334:	d3f9      	bcc.n	800032a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000336:	4a0a      	ldr	r2, [pc, #40]	@ (8000360 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000338:	4c0a      	ldr	r4, [pc, #40]	@ (8000364 <LoopForever+0x16>)
  movs r3, #0
 800033a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800033c:	e001      	b.n	8000342 <LoopFillZerobss>

0800033e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800033e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000340:	3204      	adds	r2, #4

08000342 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000342:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000344:	d3fb      	bcc.n	800033e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000346:	f000 fcaf 	bl	8000ca8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800034a:	f7ff ffbd 	bl	80002c8 <main>

0800034e <LoopForever>:

LoopForever:
  b LoopForever
 800034e:	e7fe      	b.n	800034e <LoopForever>
  ldr   r0, =_estack
 8000350:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000358:	20000418 	.word	0x20000418
  ldr r2, =_sidata
 800035c:	08000d18 	.word	0x08000d18
  ldr r2, =_sbss
 8000360:	20000418 	.word	0x20000418
  ldr r4, =_ebss
 8000364:	20000458 	.word	0x20000458

08000368 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000368:	e7fe      	b.n	8000368 <ADC_IRQHandler>
	...

0800036c <GPIO_PeriClockControl>:

/*
 * Peripheral Clock Setup
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000378:	78fb      	ldrb	r3, [r7, #3]
 800037a:	2b01      	cmp	r3, #1
 800037c:	d141      	bne.n	8000402 <GPIO_PeriClockControl+0x96>
	{
		if(pGPIOx == GPIOA)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a43      	ldr	r2, [pc, #268]	@ (8000490 <GPIO_PeriClockControl+0x124>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000386:	4b43      	ldr	r3, [pc, #268]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800038a:	4a42      	ldr	r2, [pc, #264]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6313      	str	r3, [r2, #48]	@ 0x30
		}else if(pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
	}
}
 8000392:	e077      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		}else if(pGPIOx == GPIOB)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a40      	ldr	r2, [pc, #256]	@ (8000498 <GPIO_PeriClockControl+0x12c>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800039c:	4b3d      	ldr	r3, [pc, #244]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003a0:	4a3c      	ldr	r2, [pc, #240]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 80003a2:	f043 0302 	orr.w	r3, r3, #2
 80003a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a8:	e06c      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		}else if(pGPIOx == GPIOC)
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a3b      	ldr	r2, [pc, #236]	@ (800049c <GPIO_PeriClockControl+0x130>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003b2:	4b38      	ldr	r3, [pc, #224]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b6:	4a37      	ldr	r2, [pc, #220]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 80003b8:	f043 0304 	orr.w	r3, r3, #4
 80003bc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003be:	e061      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		}else if(pGPIOx == GPIOD)
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a37      	ldr	r2, [pc, #220]	@ (80004a0 <GPIO_PeriClockControl+0x134>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003c8:	4b32      	ldr	r3, [pc, #200]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003cc:	4a31      	ldr	r2, [pc, #196]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 80003ce:	f043 0308 	orr.w	r3, r3, #8
 80003d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d4:	e056      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		}else if(pGPIOx == GPIOE)
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a32      	ldr	r2, [pc, #200]	@ (80004a4 <GPIO_PeriClockControl+0x138>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d106      	bne.n	80003ec <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003de:	4b2d      	ldr	r3, [pc, #180]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 80003e4:	f043 0310 	orr.w	r3, r3, #16
 80003e8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ea:	e04b      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		}else if(pGPIOx == GPIOH)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a2e      	ldr	r2, [pc, #184]	@ (80004a8 <GPIO_PeriClockControl+0x13c>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d147      	bne.n	8000484 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_EN();
 80003f4:	4b27      	ldr	r3, [pc, #156]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f8:	4a26      	ldr	r2, [pc, #152]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 80003fa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000400:	e040      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		if(pGPIOx == GPIOA)
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a22      	ldr	r2, [pc, #136]	@ (8000490 <GPIO_PeriClockControl+0x124>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PeriClockControl+0xac>
			GPIOA_PCLK_DI();
 800040a:	4b22      	ldr	r3, [pc, #136]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040e:	4a21      	ldr	r2, [pc, #132]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 8000410:	f023 0301 	bic.w	r3, r3, #1
 8000414:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000416:	e035      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		}else if(pGPIOx == GPIOB)
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a1f      	ldr	r2, [pc, #124]	@ (8000498 <GPIO_PeriClockControl+0x12c>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PeriClockControl+0xc2>
			GPIOB_PCLK_DI();
 8000420:	4b1c      	ldr	r3, [pc, #112]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000424:	4a1b      	ldr	r2, [pc, #108]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 8000426:	f023 0302 	bic.w	r3, r3, #2
 800042a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800042c:	e02a      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		}else if(pGPIOx == GPIOC)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a1a      	ldr	r2, [pc, #104]	@ (800049c <GPIO_PeriClockControl+0x130>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d106      	bne.n	8000444 <GPIO_PeriClockControl+0xd8>
			GPIOC_PCLK_DI();
 8000436:	4b17      	ldr	r3, [pc, #92]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800043a:	4a16      	ldr	r2, [pc, #88]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 800043c:	f023 0304 	bic.w	r3, r3, #4
 8000440:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000442:	e01f      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		}else if(pGPIOx == GPIOD)
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a16      	ldr	r2, [pc, #88]	@ (80004a0 <GPIO_PeriClockControl+0x134>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d106      	bne.n	800045a <GPIO_PeriClockControl+0xee>
			GPIOD_PCLK_DI();
 800044c:	4b11      	ldr	r3, [pc, #68]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000450:	4a10      	ldr	r2, [pc, #64]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 8000452:	f023 0308 	bic.w	r3, r3, #8
 8000456:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000458:	e014      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		}else if(pGPIOx == GPIOE)
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a11      	ldr	r2, [pc, #68]	@ (80004a4 <GPIO_PeriClockControl+0x138>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d106      	bne.n	8000470 <GPIO_PeriClockControl+0x104>
			GPIOE_PCLK_DI();
 8000462:	4b0c      	ldr	r3, [pc, #48]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000466:	4a0b      	ldr	r2, [pc, #44]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 8000468:	f023 0310 	bic.w	r3, r3, #16
 800046c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800046e:	e009      	b.n	8000484 <GPIO_PeriClockControl+0x118>
		}else if(pGPIOx == GPIOH)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a0d      	ldr	r2, [pc, #52]	@ (80004a8 <GPIO_PeriClockControl+0x13c>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d105      	bne.n	8000484 <GPIO_PeriClockControl+0x118>
			GPIOH_PCLK_DI();
 8000478:	4b06      	ldr	r3, [pc, #24]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800047c:	4a05      	ldr	r2, [pc, #20]	@ (8000494 <GPIO_PeriClockControl+0x128>)
 800047e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000482:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000484:	bf00      	nop
 8000486:	370c      	adds	r7, #12
 8000488:	46bd      	mov	sp, r7
 800048a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048e:	4770      	bx	lr
 8000490:	40020000 	.word	0x40020000
 8000494:	40023800 	.word	0x40023800
 8000498:	40020400 	.word	0x40020400
 800049c:	40020800 	.word	0x40020800
 80004a0:	40020c00 	.word	0x40020c00
 80004a4:	40021000 	.word	0x40021000
 80004a8:	40021c00 	.word	0x40021c00

080004ac <GPIO_Init>:
/*
 * Init and De-Init
 */
void GPIO_Init(GPIO_Handle_t* pGPIOHandle)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0
 80004b2:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 80004b4:	2300      	movs	r3, #0
 80004b6:	617b      	str	r3, [r7, #20]

	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	681b      	ldr	r3, [r3, #0]
 80004bc:	2101      	movs	r1, #1
 80004be:	4618      	mov	r0, r3
 80004c0:	f7ff ff54 	bl	800036c <GPIO_PeriClockControl>
	//1.	configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	795b      	ldrb	r3, [r3, #5]
 80004c8:	2b03      	cmp	r3, #3
 80004ca:	d81f      	bhi.n	800050c <GPIO_Init+0x60>
	{
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	795b      	ldrb	r3, [r3, #5]
 80004d0:	461a      	mov	r2, r3
 80004d2:	687b      	ldr	r3, [r7, #4]
 80004d4:	791b      	ldrb	r3, [r3, #4]
 80004d6:	005b      	lsls	r3, r3, #1
 80004d8:	fa02 f303 	lsl.w	r3, r2, r3
 80004dc:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~ (0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	681a      	ldr	r2, [r3, #0]
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	791b      	ldrb	r3, [r3, #4]
 80004e8:	4619      	mov	r1, r3
 80004ea:	2303      	movs	r3, #3
 80004ec:	408b      	lsls	r3, r1
 80004ee:	43db      	mvns	r3, r3
 80004f0:	4619      	mov	r1, r3
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	400a      	ands	r2, r1
 80004f8:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	6819      	ldr	r1, [r3, #0]
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	697a      	ldr	r2, [r7, #20]
 8000506:	430a      	orrs	r2, r1
 8000508:	601a      	str	r2, [r3, #0]
 800050a:	e09a      	b.n	8000642 <GPIO_Init+0x196>
	}else
	{
	//This is interrupt
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	795b      	ldrb	r3, [r3, #5]
 8000510:	2b04      	cmp	r3, #4
 8000512:	d117      	bne.n	8000544 <GPIO_Init+0x98>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000514:	4b9a      	ldr	r3, [pc, #616]	@ (8000780 <GPIO_Init+0x2d4>)
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	7912      	ldrb	r2, [r2, #4]
 800051c:	4611      	mov	r1, r2
 800051e:	2201      	movs	r2, #1
 8000520:	408a      	lsls	r2, r1
 8000522:	4611      	mov	r1, r2
 8000524:	4a96      	ldr	r2, [pc, #600]	@ (8000780 <GPIO_Init+0x2d4>)
 8000526:	430b      	orrs	r3, r1
 8000528:	60d3      	str	r3, [r2, #12]
			// clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800052a:	4b95      	ldr	r3, [pc, #596]	@ (8000780 <GPIO_Init+0x2d4>)
 800052c:	689b      	ldr	r3, [r3, #8]
 800052e:	687a      	ldr	r2, [r7, #4]
 8000530:	7912      	ldrb	r2, [r2, #4]
 8000532:	4611      	mov	r1, r2
 8000534:	2201      	movs	r2, #1
 8000536:	408a      	lsls	r2, r1
 8000538:	43d2      	mvns	r2, r2
 800053a:	4611      	mov	r1, r2
 800053c:	4a90      	ldr	r2, [pc, #576]	@ (8000780 <GPIO_Init+0x2d4>)
 800053e:	400b      	ands	r3, r1
 8000540:	6093      	str	r3, [r2, #8]
 8000542:	e035      	b.n	80005b0 <GPIO_Init+0x104>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	795b      	ldrb	r3, [r3, #5]
 8000548:	2b05      	cmp	r3, #5
 800054a:	d117      	bne.n	800057c <GPIO_Init+0xd0>
		{
			//2. configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800054c:	4b8c      	ldr	r3, [pc, #560]	@ (8000780 <GPIO_Init+0x2d4>)
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	687a      	ldr	r2, [r7, #4]
 8000552:	7912      	ldrb	r2, [r2, #4]
 8000554:	4611      	mov	r1, r2
 8000556:	2201      	movs	r2, #1
 8000558:	408a      	lsls	r2, r1
 800055a:	4611      	mov	r1, r2
 800055c:	4a88      	ldr	r2, [pc, #544]	@ (8000780 <GPIO_Init+0x2d4>)
 800055e:	430b      	orrs	r3, r1
 8000560:	6093      	str	r3, [r2, #8]
			// clear the corresponding FTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000562:	4b87      	ldr	r3, [pc, #540]	@ (8000780 <GPIO_Init+0x2d4>)
 8000564:	68db      	ldr	r3, [r3, #12]
 8000566:	687a      	ldr	r2, [r7, #4]
 8000568:	7912      	ldrb	r2, [r2, #4]
 800056a:	4611      	mov	r1, r2
 800056c:	2201      	movs	r2, #1
 800056e:	408a      	lsls	r2, r1
 8000570:	43d2      	mvns	r2, r2
 8000572:	4611      	mov	r1, r2
 8000574:	4a82      	ldr	r2, [pc, #520]	@ (8000780 <GPIO_Init+0x2d4>)
 8000576:	400b      	ands	r3, r1
 8000578:	60d3      	str	r3, [r2, #12]
 800057a:	e019      	b.n	80005b0 <GPIO_Init+0x104>
		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	795b      	ldrb	r3, [r3, #5]
 8000580:	2b06      	cmp	r3, #6
 8000582:	d115      	bne.n	80005b0 <GPIO_Init+0x104>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000584:	4b7e      	ldr	r3, [pc, #504]	@ (8000780 <GPIO_Init+0x2d4>)
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	687a      	ldr	r2, [r7, #4]
 800058a:	7912      	ldrb	r2, [r2, #4]
 800058c:	4611      	mov	r1, r2
 800058e:	2201      	movs	r2, #1
 8000590:	408a      	lsls	r2, r1
 8000592:	4611      	mov	r1, r2
 8000594:	4a7a      	ldr	r2, [pc, #488]	@ (8000780 <GPIO_Init+0x2d4>)
 8000596:	430b      	orrs	r3, r1
 8000598:	6093      	str	r3, [r2, #8]
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059a:	4b79      	ldr	r3, [pc, #484]	@ (8000780 <GPIO_Init+0x2d4>)
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	687a      	ldr	r2, [r7, #4]
 80005a0:	7912      	ldrb	r2, [r2, #4]
 80005a2:	4611      	mov	r1, r2
 80005a4:	2201      	movs	r2, #1
 80005a6:	408a      	lsls	r2, r1
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a75      	ldr	r2, [pc, #468]	@ (8000780 <GPIO_Init+0x2d4>)
 80005ac:	430b      	orrs	r3, r1
 80005ae:	60d3      	str	r3, [r2, #12]
		}
		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	791b      	ldrb	r3, [r3, #4]
 80005b4:	089b      	lsrs	r3, r3, #2
 80005b6:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	791b      	ldrb	r3, [r3, #4]
 80005bc:	f003 0303 	and.w	r3, r3, #3
 80005c0:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	4a6f      	ldr	r2, [pc, #444]	@ (8000784 <GPIO_Init+0x2d8>)
 80005c8:	4293      	cmp	r3, r2
 80005ca:	d01d      	beq.n	8000608 <GPIO_Init+0x15c>
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a6d      	ldr	r2, [pc, #436]	@ (8000788 <GPIO_Init+0x2dc>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d016      	beq.n	8000604 <GPIO_Init+0x158>
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a6c      	ldr	r2, [pc, #432]	@ (800078c <GPIO_Init+0x2e0>)
 80005dc:	4293      	cmp	r3, r2
 80005de:	d00f      	beq.n	8000600 <GPIO_Init+0x154>
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a6a      	ldr	r2, [pc, #424]	@ (8000790 <GPIO_Init+0x2e4>)
 80005e6:	4293      	cmp	r3, r2
 80005e8:	d008      	beq.n	80005fc <GPIO_Init+0x150>
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	4a69      	ldr	r2, [pc, #420]	@ (8000794 <GPIO_Init+0x2e8>)
 80005f0:	4293      	cmp	r3, r2
 80005f2:	d101      	bne.n	80005f8 <GPIO_Init+0x14c>
 80005f4:	2304      	movs	r3, #4
 80005f6:	e008      	b.n	800060a <GPIO_Init+0x15e>
 80005f8:	2300      	movs	r3, #0
 80005fa:	e006      	b.n	800060a <GPIO_Init+0x15e>
 80005fc:	2303      	movs	r3, #3
 80005fe:	e004      	b.n	800060a <GPIO_Init+0x15e>
 8000600:	2302      	movs	r3, #2
 8000602:	e002      	b.n	800060a <GPIO_Init+0x15e>
 8000604:	2301      	movs	r3, #1
 8000606:	e000      	b.n	800060a <GPIO_Init+0x15e>
 8000608:	2300      	movs	r3, #0
 800060a:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 800060c:	4b62      	ldr	r3, [pc, #392]	@ (8000798 <GPIO_Init+0x2ec>)
 800060e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000610:	4a61      	ldr	r2, [pc, #388]	@ (8000798 <GPIO_Init+0x2ec>)
 8000612:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000616:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000618:	7c7a      	ldrb	r2, [r7, #17]
 800061a:	7cbb      	ldrb	r3, [r7, #18]
 800061c:	009b      	lsls	r3, r3, #2
 800061e:	fa02 f103 	lsl.w	r1, r2, r3
 8000622:	4a5e      	ldr	r2, [pc, #376]	@ (800079c <GPIO_Init+0x2f0>)
 8000624:	7cfb      	ldrb	r3, [r7, #19]
 8000626:	3302      	adds	r3, #2
 8000628:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR
		EXTI->IMR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800062c:	4b54      	ldr	r3, [pc, #336]	@ (8000780 <GPIO_Init+0x2d4>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	687a      	ldr	r2, [r7, #4]
 8000632:	7912      	ldrb	r2, [r2, #4]
 8000634:	4611      	mov	r1, r2
 8000636:	2201      	movs	r2, #1
 8000638:	408a      	lsls	r2, r1
 800063a:	4611      	mov	r1, r2
 800063c:	4a50      	ldr	r2, [pc, #320]	@ (8000780 <GPIO_Init+0x2d4>)
 800063e:	430b      	orrs	r3, r1
 8000640:	6013      	str	r3, [r2, #0]

	}

	temp = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
	//2.	configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	799b      	ldrb	r3, [r3, #6]
 800064a:	461a      	mov	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	fa02 f303 	lsl.w	r3, r2, r3
 8000656:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~ (0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	689a      	ldr	r2, [r3, #8]
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	791b      	ldrb	r3, [r3, #4]
 8000662:	4619      	mov	r1, r3
 8000664:	2303      	movs	r3, #3
 8000666:	408b      	lsls	r3, r1
 8000668:	43db      	mvns	r3, r3
 800066a:	4619      	mov	r1, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	400a      	ands	r2, r1
 8000672:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	6899      	ldr	r1, [r3, #8]
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	697a      	ldr	r2, [r7, #20]
 8000680:	430a      	orrs	r2, r1
 8000682:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000684:	2300      	movs	r3, #0
 8000686:	617b      	str	r3, [r7, #20]
	//3.	configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	79db      	ldrb	r3, [r3, #7]
 800068c:	461a      	mov	r2, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	791b      	ldrb	r3, [r3, #4]
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	fa02 f303 	lsl.w	r3, r2, r3
 8000698:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~ (0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	68da      	ldr	r2, [r3, #12]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	791b      	ldrb	r3, [r3, #4]
 80006a4:	4619      	mov	r1, r3
 80006a6:	2303      	movs	r3, #3
 80006a8:	408b      	lsls	r3, r1
 80006aa:	43db      	mvns	r3, r3
 80006ac:	4619      	mov	r1, r3
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	400a      	ands	r2, r1
 80006b4:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	68d9      	ldr	r1, [r3, #12]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	697a      	ldr	r2, [r7, #20]
 80006c2:	430a      	orrs	r2, r1
 80006c4:	60da      	str	r2, [r3, #12]
	temp = 0;
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
	//4.	configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	7a1b      	ldrb	r3, [r3, #8]
 80006ce:	461a      	mov	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	791b      	ldrb	r3, [r3, #4]
 80006d4:	fa02 f303 	lsl.w	r3, r2, r3
 80006d8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~ (0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	685a      	ldr	r2, [r3, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	791b      	ldrb	r3, [r3, #4]
 80006e4:	4619      	mov	r1, r3
 80006e6:	2301      	movs	r3, #1
 80006e8:	408b      	lsls	r3, r1
 80006ea:	43db      	mvns	r3, r3
 80006ec:	4619      	mov	r1, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	400a      	ands	r2, r1
 80006f4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	6859      	ldr	r1, [r3, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	697a      	ldr	r2, [r7, #20]
 8000702:	430a      	orrs	r2, r1
 8000704:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000706:	2300      	movs	r3, #0
 8000708:	617b      	str	r3, [r7, #20]
	//5.	configure the alt  functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	795b      	ldrb	r3, [r3, #5]
 800070e:	2b02      	cmp	r3, #2
 8000710:	d131      	bne.n	8000776 <GPIO_Init+0x2ca>
	{
		//configure the alt function registers
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	791b      	ldrb	r3, [r3, #4]
 8000716:	08db      	lsrs	r3, r3, #3
 8000718:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	791b      	ldrb	r3, [r3, #4]
 800071e:	f003 0307 	and.w	r3, r3, #7
 8000722:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~ (0xF << (4 * temp2));
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	7c3a      	ldrb	r2, [r7, #16]
 800072a:	3208      	adds	r2, #8
 800072c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000730:	7bfb      	ldrb	r3, [r7, #15]
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	220f      	movs	r2, #15
 8000736:	fa02 f303 	lsl.w	r3, r2, r3
 800073a:	43db      	mvns	r3, r3
 800073c:	4618      	mov	r0, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	7c3a      	ldrb	r2, [r7, #16]
 8000744:	4001      	ands	r1, r0
 8000746:	3208      	adds	r2, #8
 8000748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	7c3a      	ldrb	r2, [r7, #16]
 8000752:	3208      	adds	r2, #8
 8000754:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	7a5b      	ldrb	r3, [r3, #9]
 800075c:	461a      	mov	r2, r3
 800075e:	7bfb      	ldrb	r3, [r7, #15]
 8000760:	009b      	lsls	r3, r3, #2
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	4618      	mov	r0, r3
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	7c3a      	ldrb	r2, [r7, #16]
 800076e:	4301      	orrs	r1, r0
 8000770:	3208      	adds	r2, #8
 8000772:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000776:	bf00      	nop
 8000778:	3718      	adds	r7, #24
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40013c00 	.word	0x40013c00
 8000784:	40020000 	.word	0x40020000
 8000788:	40020400 	.word	0x40020400
 800078c:	40020800 	.word	0x40020800
 8000790:	40020c00 	.word	0x40020c00
 8000794:	40021000 	.word	0x40021000
 8000798:	40023800 	.word	0x40023800
 800079c:	40013800 	.word	0x40013800

080007a0 <GPIO_ReadFromInputPin>:
/*
 * Data read and Write
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
 80007a8:	460b      	mov	r3, r1
 80007aa:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	691a      	ldr	r2, [r3, #16]
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	fa22 f303 	lsr.w	r3, r2, r3
 80007b6:	b2db      	uxtb	r3, r3
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	73fb      	strb	r3, [r7, #15]
	return value;
 80007be:	7bfb      	ldrb	r3, [r7, #15]
}
 80007c0:	4618      	mov	r0, r3
 80007c2:	3714      	adds	r7, #20
 80007c4:	46bd      	mov	sp, r7
 80007c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ca:	4770      	bx	lr

080007cc <RCC_GetPCLK1Value>:
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = {2,4,8,16};
uint8_t APB2_PreScaler[4] = {2,4,8,16};

uint32_t RCC_GetPCLK1Value(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	b085      	sub	sp, #20
 80007d0:	af00      	add	r7, sp, #0
	uint32_t pclk1,SystemClk;
	uint8_t clksrc,temp,ahbp,apb1p;
	clksrc = (( RCC->CFGR >> 2) & 0x3);
 80007d2:	4b23      	ldr	r3, [pc, #140]	@ (8000860 <RCC_GetPCLK1Value+0x94>)
 80007d4:	689b      	ldr	r3, [r3, #8]
 80007d6:	089b      	lsrs	r3, r3, #2
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	f003 0303 	and.w	r3, r3, #3
 80007de:	727b      	strb	r3, [r7, #9]
	if(clksrc == 0)
 80007e0:	7a7b      	ldrb	r3, [r7, #9]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d102      	bne.n	80007ec <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000; //16Mhz internal
 80007e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000864 <RCC_GetPCLK1Value+0x98>)
 80007e8:	60fb      	str	r3, [r7, #12]
 80007ea:	e004      	b.n	80007f6 <RCC_GetPCLK1Value+0x2a>
	}else if(clksrc == 1)
 80007ec:	7a7b      	ldrb	r3, [r7, #9]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d101      	bne.n	80007f6 <RCC_GetPCLK1Value+0x2a>
	{
		SystemClk = 8000000; //8MHz external
 80007f2:	4b1d      	ldr	r3, [pc, #116]	@ (8000868 <RCC_GetPCLK1Value+0x9c>)
 80007f4:	60fb      	str	r3, [r7, #12]
	}

	//FOR AHB
	temp = ((RCC->CFGR >> 4) & 0xF );
 80007f6:	4b1a      	ldr	r3, [pc, #104]	@ (8000860 <RCC_GetPCLK1Value+0x94>)
 80007f8:	689b      	ldr	r3, [r3, #8]
 80007fa:	091b      	lsrs	r3, r3, #4
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	f003 030f 	and.w	r3, r3, #15
 8000802:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 8000804:	7a3b      	ldrb	r3, [r7, #8]
 8000806:	2b07      	cmp	r3, #7
 8000808:	d802      	bhi.n	8000810 <RCC_GetPCLK1Value+0x44>
	{
		ahbp=1;
 800080a:	2301      	movs	r3, #1
 800080c:	72fb      	strb	r3, [r7, #11]
 800080e:	e005      	b.n	800081c <RCC_GetPCLK1Value+0x50>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 8000810:	7a3b      	ldrb	r3, [r7, #8]
 8000812:	3b08      	subs	r3, #8
 8000814:	4a15      	ldr	r2, [pc, #84]	@ (800086c <RCC_GetPCLK1Value+0xa0>)
 8000816:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800081a:	72fb      	strb	r3, [r7, #11]
	}

	//FOR APB1
	temp = ((RCC->CFGR >> 10) & 0x7 );
 800081c:	4b10      	ldr	r3, [pc, #64]	@ (8000860 <RCC_GetPCLK1Value+0x94>)
 800081e:	689b      	ldr	r3, [r3, #8]
 8000820:	0a9b      	lsrs	r3, r3, #10
 8000822:	b2db      	uxtb	r3, r3
 8000824:	f003 0307 	and.w	r3, r3, #7
 8000828:	723b      	strb	r3, [r7, #8]

		if(temp < 4)
 800082a:	7a3b      	ldrb	r3, [r7, #8]
 800082c:	2b03      	cmp	r3, #3
 800082e:	d802      	bhi.n	8000836 <RCC_GetPCLK1Value+0x6a>
		{
			apb1p=1;
 8000830:	2301      	movs	r3, #1
 8000832:	72bb      	strb	r3, [r7, #10]
 8000834:	e004      	b.n	8000840 <RCC_GetPCLK1Value+0x74>
		}else
		{
			apb1p = APB1_PreScaler[temp-4];
 8000836:	7a3b      	ldrb	r3, [r7, #8]
 8000838:	3b04      	subs	r3, #4
 800083a:	4a0d      	ldr	r2, [pc, #52]	@ (8000870 <RCC_GetPCLK1Value+0xa4>)
 800083c:	5cd3      	ldrb	r3, [r2, r3]
 800083e:	72bb      	strb	r3, [r7, #10]
		}

	pclk1 = ((SystemClk / ahbp ) / apb1p);
 8000840:	7afb      	ldrb	r3, [r7, #11]
 8000842:	68fa      	ldr	r2, [r7, #12]
 8000844:	fbb2 f2f3 	udiv	r2, r2, r3
 8000848:	7abb      	ldrb	r3, [r7, #10]
 800084a:	fbb2 f3f3 	udiv	r3, r2, r3
 800084e:	607b      	str	r3, [r7, #4]
	return pclk1;
 8000850:	687b      	ldr	r3, [r7, #4]
}
 8000852:	4618      	mov	r0, r3
 8000854:	3714      	adds	r7, #20
 8000856:	46bd      	mov	sp, r7
 8000858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085c:	4770      	bx	lr
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	00f42400 	.word	0x00f42400
 8000868:	007a1200 	.word	0x007a1200
 800086c:	20000400 	.word	0x20000400
 8000870:	20000410 	.word	0x20000410

08000874 <RCC_GetPCLK2Value>:

uint32_t RCC_GetPCLK2Value(void)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
	uint32_t pclk2,SystemClk;
	uint8_t clksrc,temp,ahbp,apb2p;
	clksrc = (( RCC->CFGR >> 2) & 0x3); //Check System clock
 800087a:	4b23      	ldr	r3, [pc, #140]	@ (8000908 <RCC_GetPCLK2Value+0x94>)
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	089b      	lsrs	r3, r3, #2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	f003 0303 	and.w	r3, r3, #3
 8000886:	727b      	strb	r3, [r7, #9]
	if(clksrc == 0)
 8000888:	7a7b      	ldrb	r3, [r7, #9]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d102      	bne.n	8000894 <RCC_GetPCLK2Value+0x20>
	{
		SystemClk = 16000000; //16Mhz internal
 800088e:	4b1f      	ldr	r3, [pc, #124]	@ (800090c <RCC_GetPCLK2Value+0x98>)
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	e004      	b.n	800089e <RCC_GetPCLK2Value+0x2a>
	}else if(clksrc == 1)
 8000894:	7a7b      	ldrb	r3, [r7, #9]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d101      	bne.n	800089e <RCC_GetPCLK2Value+0x2a>
	{
		SystemClk = 8000000; //8MHz external
 800089a:	4b1d      	ldr	r3, [pc, #116]	@ (8000910 <RCC_GetPCLK2Value+0x9c>)
 800089c:	60fb      	str	r3, [r7, #12]
	}

	//FOR AHB
	temp = ((RCC->CFGR >> 4) & 0xF );
 800089e:	4b1a      	ldr	r3, [pc, #104]	@ (8000908 <RCC_GetPCLK2Value+0x94>)
 80008a0:	689b      	ldr	r3, [r3, #8]
 80008a2:	091b      	lsrs	r3, r3, #4
 80008a4:	b2db      	uxtb	r3, r3
 80008a6:	f003 030f 	and.w	r3, r3, #15
 80008aa:	723b      	strb	r3, [r7, #8]

	if(temp < 8)
 80008ac:	7a3b      	ldrb	r3, [r7, #8]
 80008ae:	2b07      	cmp	r3, #7
 80008b0:	d802      	bhi.n	80008b8 <RCC_GetPCLK2Value+0x44>
	{
		ahbp=1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	72fb      	strb	r3, [r7, #11]
 80008b6:	e005      	b.n	80008c4 <RCC_GetPCLK2Value+0x50>
	}else
	{
		ahbp = AHB_PreScaler[temp-8];
 80008b8:	7a3b      	ldrb	r3, [r7, #8]
 80008ba:	3b08      	subs	r3, #8
 80008bc:	4a15      	ldr	r2, [pc, #84]	@ (8000914 <RCC_GetPCLK2Value+0xa0>)
 80008be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80008c2:	72fb      	strb	r3, [r7, #11]
	}

	//FOR APB2
	temp = ((RCC->CFGR >> 13) & 0x7 );
 80008c4:	4b10      	ldr	r3, [pc, #64]	@ (8000908 <RCC_GetPCLK2Value+0x94>)
 80008c6:	689b      	ldr	r3, [r3, #8]
 80008c8:	0b5b      	lsrs	r3, r3, #13
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	f003 0307 	and.w	r3, r3, #7
 80008d0:	723b      	strb	r3, [r7, #8]

		if(temp < 4)
 80008d2:	7a3b      	ldrb	r3, [r7, #8]
 80008d4:	2b03      	cmp	r3, #3
 80008d6:	d802      	bhi.n	80008de <RCC_GetPCLK2Value+0x6a>
		{
			apb2p=1;
 80008d8:	2301      	movs	r3, #1
 80008da:	72bb      	strb	r3, [r7, #10]
 80008dc:	e004      	b.n	80008e8 <RCC_GetPCLK2Value+0x74>
		}else
		{
			apb2p = APB2_PreScaler[temp-4];
 80008de:	7a3b      	ldrb	r3, [r7, #8]
 80008e0:	3b04      	subs	r3, #4
 80008e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000918 <RCC_GetPCLK2Value+0xa4>)
 80008e4:	5cd3      	ldrb	r3, [r2, r3]
 80008e6:	72bb      	strb	r3, [r7, #10]
		}

	pclk2 = ((SystemClk / ahbp ) / apb2p);
 80008e8:	7afb      	ldrb	r3, [r7, #11]
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	fbb2 f2f3 	udiv	r2, r2, r3
 80008f0:	7abb      	ldrb	r3, [r7, #10]
 80008f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f6:	607b      	str	r3, [r7, #4]
	return pclk2;
 80008f8:	687b      	ldr	r3, [r7, #4]
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3714      	adds	r7, #20
 80008fe:	46bd      	mov	sp, r7
 8000900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000904:	4770      	bx	lr
 8000906:	bf00      	nop
 8000908:	40023800 	.word	0x40023800
 800090c:	00f42400 	.word	0x00f42400
 8000910:	007a1200 	.word	0x007a1200
 8000914:	20000400 	.word	0x20000400
 8000918:	20000414 	.word	0x20000414

0800091c <USART_PeriClockControl>:

/*
 * Peripheral clock setup
 */
void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	2b01      	cmp	r3, #1
 800092c:	d120      	bne.n	8000970 <USART_PeriClockControl+0x54>
	{
		if(pUSARTx == USART1)
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	4a22      	ldr	r2, [pc, #136]	@ (80009bc <USART_PeriClockControl+0xa0>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d106      	bne.n	8000944 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000936:	4b22      	ldr	r3, [pc, #136]	@ (80009c0 <USART_PeriClockControl+0xa4>)
 8000938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800093a:	4a21      	ldr	r2, [pc, #132]	@ (80009c0 <USART_PeriClockControl+0xa4>)
 800093c:	f043 0310 	orr.w	r3, r3, #16
 8000940:	6453      	str	r3, [r2, #68]	@ 0x44
		}else if(pUSARTx == USART6)
		{
			USART6_PCLK_DI();
		}
	}
}
 8000942:	e035      	b.n	80009b0 <USART_PeriClockControl+0x94>
		}else if(pUSARTx == USART2)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	4a1f      	ldr	r2, [pc, #124]	@ (80009c4 <USART_PeriClockControl+0xa8>)
 8000948:	4293      	cmp	r3, r2
 800094a:	d106      	bne.n	800095a <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 800094c:	4b1c      	ldr	r3, [pc, #112]	@ (80009c0 <USART_PeriClockControl+0xa4>)
 800094e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000950:	4a1b      	ldr	r2, [pc, #108]	@ (80009c0 <USART_PeriClockControl+0xa4>)
 8000952:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000956:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000958:	e02a      	b.n	80009b0 <USART_PeriClockControl+0x94>
		}else if(pUSARTx == USART6)
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4a1a      	ldr	r2, [pc, #104]	@ (80009c8 <USART_PeriClockControl+0xac>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d126      	bne.n	80009b0 <USART_PeriClockControl+0x94>
			USART6_PCLK_EN();
 8000962:	4b17      	ldr	r3, [pc, #92]	@ (80009c0 <USART_PeriClockControl+0xa4>)
 8000964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000966:	4a16      	ldr	r2, [pc, #88]	@ (80009c0 <USART_PeriClockControl+0xa4>)
 8000968:	f043 0320 	orr.w	r3, r3, #32
 800096c:	6453      	str	r3, [r2, #68]	@ 0x44
}
 800096e:	e01f      	b.n	80009b0 <USART_PeriClockControl+0x94>
		if(pUSARTx == USART1)
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	4a12      	ldr	r2, [pc, #72]	@ (80009bc <USART_PeriClockControl+0xa0>)
 8000974:	4293      	cmp	r3, r2
 8000976:	d106      	bne.n	8000986 <USART_PeriClockControl+0x6a>
			USART1_PCLK_DI();
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <USART_PeriClockControl+0xa4>)
 800097a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800097c:	4a10      	ldr	r2, [pc, #64]	@ (80009c0 <USART_PeriClockControl+0xa4>)
 800097e:	f023 0310 	bic.w	r3, r3, #16
 8000982:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000984:	e014      	b.n	80009b0 <USART_PeriClockControl+0x94>
		}else if(pUSARTx == USART2)
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	4a0e      	ldr	r2, [pc, #56]	@ (80009c4 <USART_PeriClockControl+0xa8>)
 800098a:	4293      	cmp	r3, r2
 800098c:	d106      	bne.n	800099c <USART_PeriClockControl+0x80>
			USART2_PCLK_DI();
 800098e:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <USART_PeriClockControl+0xa4>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000992:	4a0b      	ldr	r2, [pc, #44]	@ (80009c0 <USART_PeriClockControl+0xa4>)
 8000994:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000998:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800099a:	e009      	b.n	80009b0 <USART_PeriClockControl+0x94>
		}else if(pUSARTx == USART6)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	4a0a      	ldr	r2, [pc, #40]	@ (80009c8 <USART_PeriClockControl+0xac>)
 80009a0:	4293      	cmp	r3, r2
 80009a2:	d105      	bne.n	80009b0 <USART_PeriClockControl+0x94>
			USART6_PCLK_DI();
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <USART_PeriClockControl+0xa4>)
 80009a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009a8:	4a05      	ldr	r2, [pc, #20]	@ (80009c0 <USART_PeriClockControl+0xa4>)
 80009aa:	f023 0320 	bic.w	r3, r3, #32
 80009ae:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	40011000 	.word	0x40011000
 80009c0:	40023800 	.word	0x40023800
 80009c4:	40004400 	.word	0x40004400
 80009c8:	40011400 	.word	0x40011400

080009cc <USART_SetBaudRate>:

void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b088      	sub	sp, #32
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	4a31      	ldr	r2, [pc, #196]	@ (8000aa4 <USART_SetBaudRate+0xd8>)
 80009de:	4293      	cmp	r3, r2
 80009e0:	d003      	beq.n	80009ea <USART_SetBaudRate+0x1e>
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4a30      	ldr	r2, [pc, #192]	@ (8000aa8 <USART_SetBaudRate+0xdc>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d103      	bne.n	80009f2 <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 80009ea:	f7ff ff43 	bl	8000874 <RCC_GetPCLK2Value>
 80009ee:	61f8      	str	r0, [r7, #28]
 80009f0:	e002      	b.n	80009f8 <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 80009f2:	f7ff feeb 	bl	80007cc <RCC_GetPCLK1Value>
 80009f6:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVER8))
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d00b      	beq.n	8000a1c <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 * BaudRate));
 8000a04:	69fa      	ldr	r2, [r7, #28]
 8000a06:	4613      	mov	r3, r2
 8000a08:	009b      	lsls	r3, r3, #2
 8000a0a:	4413      	add	r3, r2
 8000a0c:	009a      	lsls	r2, r3, #2
 8000a0e:	441a      	add	r2, r3
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a18:	61bb      	str	r3, [r7, #24]
 8000a1a:	e00a      	b.n	8000a32 <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 * BaudRate));
 8000a1c:	69fa      	ldr	r2, [r7, #28]
 8000a1e:	4613      	mov	r3, r2
 8000a20:	009b      	lsls	r3, r3, #2
 8000a22:	4413      	add	r3, r2
 8000a24:	009a      	lsls	r2, r3, #2
 8000a26:	441a      	add	r2, r3
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a30:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000a32:	69bb      	ldr	r3, [r7, #24]
 8000a34:	4a1d      	ldr	r2, [pc, #116]	@ (8000aac <USART_SetBaudRate+0xe0>)
 8000a36:	fba2 2303 	umull	r2, r3, r2, r3
 8000a3a:	095b      	lsrs	r3, r3, #5
 8000a3c:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	011b      	lsls	r3, r3, #4
 8000a42:	693a      	ldr	r2, [r7, #16]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	2264      	movs	r2, #100	@ 0x64
 8000a4c:	fb02 f303 	mul.w	r3, r2, r3
 8000a50:	69ba      	ldr	r2, [r7, #24]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVER8))
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	68db      	ldr	r3, [r3, #12]
 8000a5a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d00a      	beq.n	8000a78 <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100) & ((uint8_t)0x07);
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	3332      	adds	r3, #50	@ 0x32
 8000a68:	4a10      	ldr	r2, [pc, #64]	@ (8000aac <USART_SetBaudRate+0xe0>)
 8000a6a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a6e:	095b      	lsrs	r3, r3, #5
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	e009      	b.n	8000a8c <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000a78:	697b      	ldr	r3, [r7, #20]
 8000a7a:	011b      	lsls	r3, r3, #4
 8000a7c:	3332      	adds	r3, #50	@ 0x32
 8000a7e:	4a0b      	ldr	r2, [pc, #44]	@ (8000aac <USART_SetBaudRate+0xe0>)
 8000a80:	fba2 2303 	umull	r2, r3, r2, r3
 8000a84:	095b      	lsrs	r3, r3, #5
 8000a86:	f003 030f 	and.w	r3, r3, #15
 8000a8a:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000a8c:	693a      	ldr	r2, [r7, #16]
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	4313      	orrs	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	609a      	str	r2, [r3, #8]
}
 8000a9a:	bf00      	nop
 8000a9c:	3720      	adds	r7, #32
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40011000 	.word	0x40011000
 8000aa8:	40011400 	.word	0x40011400
 8000aac:	51eb851f 	.word	0x51eb851f

08000ab0 <USART_Init>:

/*
 * Init and De-init
 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//Implement the code to enable the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx, ENABLE);
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff ff2a 	bl	800091c <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config_t.USART_Mode == USART_MODE_ONLY_RX)
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	791b      	ldrb	r3, [r3, #4]
 8000acc:	2b01      	cmp	r3, #1
 8000ace:	d104      	bne.n	8000ada <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	f043 0304 	orr.w	r3, r3, #4
 8000ad6:	60fb      	str	r3, [r7, #12]
 8000ad8:	e010      	b.n	8000afc <USART_Init+0x4c>
	}else if (pUSARTHandle->USART_Config_t.USART_Mode == USART_MODE_ONLY_TX)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	791b      	ldrb	r3, [r3, #4]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d104      	bne.n	8000aec <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE);
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f043 0308 	orr.w	r3, r3, #8
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	e007      	b.n	8000afc <USART_Init+0x4c>

	}else if (pUSARTHandle->USART_Config_t.USART_Mode == USART_MODE_TXRX)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	791b      	ldrb	r3, [r3, #4]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d103      	bne.n	8000afc <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_TE) | ( 1 << USART_CR1_RE) );
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f043 030c 	orr.w	r3, r3, #12
 8000afa:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config_t.USART_WordLength << USART_CR1_M ;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7b5b      	ldrb	r3, [r3, #13]
 8000b00:	031b      	lsls	r3, r3, #12
 8000b02:	68fa      	ldr	r2, [r7, #12]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config_t.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	7b9b      	ldrb	r3, [r3, #14]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d104      	bne.n	8000b1a <USART_Init+0x6a>
	{
		//Implement the code to enale the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 8000b10:	68fb      	ldr	r3, [r7, #12]
 8000b12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b16:	60fb      	str	r3, [r7, #12]
 8000b18:	e00b      	b.n	8000b32 <USART_Init+0x82>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config_t.USART_ParityControl == USART_PARITY_EN_ODD )
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	7b9b      	ldrb	r3, [r3, #14]
 8000b1e:	2b02      	cmp	r3, #2
 8000b20:	d107      	bne.n	8000b32 <USART_Init+0x82>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000b28:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b30:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config_t.USART_NoOfStopBits << USART_CR2_STOP;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	7b1b      	ldrb	r3, [r3, #12]
 8000b42:	031b      	lsls	r3, r3, #12
 8000b44:	68fa      	ldr	r2, [r7, #12]
 8000b46:	4313      	orrs	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config_t.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	7bdb      	ldrb	r3, [r3, #15]
 8000b5a:	2b01      	cmp	r3, #1
 8000b5c:	d104      	bne.n	8000b68 <USART_Init+0xb8>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b64:	60fb      	str	r3, [r7, #12]
 8000b66:	e010      	b.n	8000b8a <USART_Init+0xda>


	}else if (pUSARTHandle->USART_Config_t.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	7bdb      	ldrb	r3, [r3, #15]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d104      	bne.n	8000b7a <USART_Init+0xca>
	{
		//Implement the code to enable RTS flow control
		tempreg |= ( 1 << USART_CR3_RTSE);
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	e007      	b.n	8000b8a <USART_Init+0xda>

	}else if (pUSARTHandle->USART_Config_t.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	7bdb      	ldrb	r3, [r3, #15]
 8000b7e:	2b03      	cmp	r3, #3
 8000b80:	d103      	bne.n	8000b8a <USART_Init+0xda>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= ( ( 1 << USART_CR3_RTSE) | ( 1 << USART_CR3_CTSE) );
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8000b88:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	68fa      	ldr	r2, [r7, #12]
 8000b90:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	USART_SetBaudRate(pUSARTHandle->pUSARTx, pUSARTHandle->USART_Config_t.USART_Baud);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681a      	ldr	r2, [r3, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	689b      	ldr	r3, [r3, #8]
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4610      	mov	r0, r2
 8000b9e:	f7ff ff15 	bl	80009cc <USART_SetBaudRate>

}
 8000ba2:	bf00      	nop
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <USART_SendData>:
/*
 * Data Send and Receive
 */

void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b086      	sub	sp, #24
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	60f8      	str	r0, [r7, #12]
 8000bb2:	60b9      	str	r1, [r7, #8]
 8000bb4:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	e031      	b.n	8000c20 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000bbc:	bf00      	nop
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	2180      	movs	r1, #128	@ 0x80
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 f85a 	bl	8000c7e <USART_GetFlagStatus>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d0f6      	beq.n	8000bbe <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config_t.USART_WordLength == USART_WORDLEN_9BITS)
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	7b5b      	ldrb	r3, [r3, #13]
 8000bd4:	2b01      	cmp	r3, #1
 8000bd6:	d118      	bne.n	8000c0a <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000bd8:	68bb      	ldr	r3, [r7, #8]
 8000bda:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR = (*pdata & (uint16_t)0x01FF);
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	881b      	ldrh	r3, [r3, #0]
 8000be0:	461a      	mov	r2, r3
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000bea:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config_t.USART_ParityControl == USART_PARITY_DISABLE)
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	7b9b      	ldrb	r3, [r3, #14]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d106      	bne.n	8000c02 <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	3301      	adds	r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	e00b      	b.n	8000c1a <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	3301      	adds	r3, #1
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	e007      	b.n	8000c1a <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	781a      	ldrb	r2, [r3, #0]
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	3301      	adds	r3, #1
 8000c18:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	617b      	str	r3, [r7, #20]
 8000c20:	697a      	ldr	r2, [r7, #20]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	429a      	cmp	r2, r3
 8000c26:	d3c9      	bcc.n	8000bbc <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000c28:	bf00      	nop
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	2140      	movs	r1, #64	@ 0x40
 8000c30:	4618      	mov	r0, r3
 8000c32:	f000 f824 	bl	8000c7e <USART_GetFlagStatus>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d0f6      	beq.n	8000c2a <USART_SendData+0x80>
}
 8000c3c:	bf00      	nop
 8000c3e:	bf00      	nop
 8000c40:	3718      	adds	r7, #24
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <USART_PeripheralControl>:

/*
 * Other Peripheral Control APIs
 */
void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnOrDi)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	460b      	mov	r3, r1
 8000c50:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000c52:	78fb      	ldrb	r3, [r7, #3]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d106      	bne.n	8000c66 <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= ( 1 << USART_CR1_UE);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	60da      	str	r2, [r3, #12]
	}else{
		pUSARTx->CR1 &= ~( 1 << USART_CR1_UE );
	}
}
 8000c64:	e005      	b.n	8000c72 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~( 1 << USART_CR1_UE );
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	60da      	str	r2, [r3, #12]
}
 8000c72:	bf00      	nop
 8000c74:	370c      	adds	r7, #12
 8000c76:	46bd      	mov	sp, r7
 8000c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7c:	4770      	bx	lr

08000c7e <USART_GetFlagStatus>:
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx , uint32_t FlagName)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	b083      	sub	sp, #12
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
 8000c86:	6039      	str	r1, [r7, #0]
	if(pUSARTx->SR & FlagName)
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d001      	beq.n	8000c98 <USART_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e000      	b.n	8000c9a <USART_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr
	...

08000ca8 <__libc_init_array>:
 8000ca8:	b570      	push	{r4, r5, r6, lr}
 8000caa:	4d0d      	ldr	r5, [pc, #52]	@ (8000ce0 <__libc_init_array+0x38>)
 8000cac:	4c0d      	ldr	r4, [pc, #52]	@ (8000ce4 <__libc_init_array+0x3c>)
 8000cae:	1b64      	subs	r4, r4, r5
 8000cb0:	10a4      	asrs	r4, r4, #2
 8000cb2:	2600      	movs	r6, #0
 8000cb4:	42a6      	cmp	r6, r4
 8000cb6:	d109      	bne.n	8000ccc <__libc_init_array+0x24>
 8000cb8:	4d0b      	ldr	r5, [pc, #44]	@ (8000ce8 <__libc_init_array+0x40>)
 8000cba:	4c0c      	ldr	r4, [pc, #48]	@ (8000cec <__libc_init_array+0x44>)
 8000cbc:	f000 f818 	bl	8000cf0 <_init>
 8000cc0:	1b64      	subs	r4, r4, r5
 8000cc2:	10a4      	asrs	r4, r4, #2
 8000cc4:	2600      	movs	r6, #0
 8000cc6:	42a6      	cmp	r6, r4
 8000cc8:	d105      	bne.n	8000cd6 <__libc_init_array+0x2e>
 8000cca:	bd70      	pop	{r4, r5, r6, pc}
 8000ccc:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cd0:	4798      	blx	r3
 8000cd2:	3601      	adds	r6, #1
 8000cd4:	e7ee      	b.n	8000cb4 <__libc_init_array+0xc>
 8000cd6:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cda:	4798      	blx	r3
 8000cdc:	3601      	adds	r6, #1
 8000cde:	e7f2      	b.n	8000cc6 <__libc_init_array+0x1e>
 8000ce0:	08000d10 	.word	0x08000d10
 8000ce4:	08000d10 	.word	0x08000d10
 8000ce8:	08000d10 	.word	0x08000d10
 8000cec:	08000d14 	.word	0x08000d14

08000cf0 <_init>:
 8000cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cf2:	bf00      	nop
 8000cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cf6:	bc08      	pop	{r3}
 8000cf8:	469e      	mov	lr, r3
 8000cfa:	4770      	bx	lr

08000cfc <_fini>:
 8000cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cfe:	bf00      	nop
 8000d00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d02:	bc08      	pop	{r3}
 8000d04:	469e      	mov	lr, r3
 8000d06:	4770      	bx	lr
